diff -r 34cd59b7ccbe py-bindings/bindings_generator.py.in
--- ompl/py-bindings/bindings_generator.py.in	Wed Mar 01 10:06:54 2017 -0600
+++ ompl/py-bindings/bindings_generator.py.in	Tue Mar 14 13:02:22 2017 -0500
@@ -39,10 +39,9 @@
 # coding: utf-8
 
 import logging
-from os.path import exists, join, isdir
-from os import getenv
-import subprocess
-from sys import platform
+import time
+import threading
+import sys
 from pygccxml import declarations, parser
 from pygccxml.utils import xml_generator
 from pyplusplus import module_builder, messages
@@ -108,6 +107,17 @@
     c = decl.return_type.decl_string[-1]
     return c=='&' or c=='*'
 
+class Heartbeat(object):
+    def __init__(self, delay):
+        self.start = time.time()
+        self.delay = delay
+    def __call__(self):
+        while True:
+            time.sleep(self.delay)
+            t = time.time()
+            print('still alive after %g seconds!' % (t - self.start))
+            sys.stdout.flush()
+
 class code_generator_t(object):
     """The base class code generator."""
 
@@ -115,7 +125,11 @@
         """Constructor.
         @name name of the python module
         @dep name of another module this module depends on"""
-        module_builder.set_logger_level( logging.INFO )
+        # create a separate thread that prints out a message every 60 seconds
+        # to let build bots know the build is not stuck.
+        self.heartbeat = threading.Thread(target = Heartbeat(60))
+        self.heartbeat.daemon = True
+        self.heartbeat.start()
         xml_generator_config = parser.load_xml_generator_configuration("@CASTXMLCONFIGPATH@")
         self.mb = module_builder.module_builder_t(
             files = [ 'bindings/' + name + '.h' ],
