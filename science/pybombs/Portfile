# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem            1.0
PortGroup             python 1.0
PortGroup             github 1.0

name                  pybombs

set pythons_suffixes {27 34 35 36}
python.versions        ${pythons_suffixes}
python.default_version 27

categories            science python
license               GPL-3
platforms             darwin
supported_archs       noarch
maintainers           michaelld

description           Python Build Overlay Managed Bundle System

long_description      PyBOMBS (Python Build Overlay Managed Bundle System) is the GNU Radio install management system for resolving dependencies and pulling in out-of-tree projects from CGRAN (Comprehensive GNU Radio Archive Network).

subport ${name}-devel {}

if {${subport} eq ${name}} {

    github.setup    pybombs pybombs 2.3.0 v
    checksums       rmd160 1780d5174c630456e5bb9d3315a2f0f2746c6816 \
                    sha256 f611de637dcbfe56852945568867fa4e3c25dfcedb269406b904463817bbab08
    worksrcdir      gnuradio-pybombs-37e7afe

    conflicts       ${name}-devel

    # fix the version to be more explicit
    post-patch {
        reinplace "s@${version}@${version} MacPorts@g" ${worksrcpath}/pybombs/__init__.py
    }

} else {

    github.setup    pybombs pybombs 36d2da72fc55c62019073c3b4c9fed02557d03e4
    version         20170225
    checksums       rmd160 6f44d323d5694ed939b01f95c5d87846d39bfd91 \
                    sha256 3228fdfa7f5e8c22e181e8144d46c3813727fa4e8a1372ad9a8ba0803e79cbea
    worksrcdir      gnuradio-${github.project}-[string range ${github.version} 0 6]

    long_description    ${long_description} \
        This port is kept up with the ${name} GIT 'master' branch, is typically updated weekly to monthly.
    conflicts       ${name}

    # fix the version to be very explicit
    post-patch {
        reinplace "s@2.3.1a0@git-[string range ${github.version} 0 7](${version}) MacPorts@g" ${worksrcpath}/pybombs/__init__.py
    }
}

# declare +python* variants

foreach this_py_version_no_dot ${pythons_suffixes} {
    set ndx [lsearch -exact ${this_py_version_no_dot} ${this_py_version_no_dot}]
    set this_conflicts [lreplace ${this_py_version_no_dot} ${ndx} ${ndx}]
    set this_description "Use python${this_py_version_no_dot}"
    eval [subst {
        variant python${this_py_version_no_dot} \
            conflicts ${this_conflicts} \
            description ${this_description} {
                python.versions ${this_py_version_no_dot}
                python.version ${this_py_version_no_dot}
                depends_lib-delete \
                    port:python[option python.default_version]
                depends_lib-append \
                    port:python${this_py_version_no_dot} \
                    port:py${this_py_version_no_dot}-future \
                    port:py${this_py_version_no_dot}-requests \
                    port:py${this_py_version_no_dot}-six \
                    port:py${this_py_version_no_dot}-yaml
            }
    }]
}

# set default, if no variants selected

set PY_VER_NO_DOT 0
foreach this_py_version_no_dot ${pythons_suffixes} {
    if {[variant_isset python${this_py_version_no_dot}]} {
        set PY_VER_NO_DOT ${this_py_version_no_dot}
        break
    }
}

if {${PY_VER_NO_DOT} == 0} {
    default_variants +python[option python.default_version]
}

# make sure the default variant is not deselected alone

set PY_VER_NO_DOT 0
foreach this_py_version_no_dot ${pythons_suffixes} {
    if {[variant_isset python${this_py_version_no_dot}]} {
        set PY_VER_NO_DOT ${this_py_version_no_dot}
        break
    }
}

if {${PY_VER_NO_DOT} == 0} {
    ui_error "\n\nYou must select a Python variant; you cannot select -python[option python.default_version] alone.\n"
    return -code error "Invalid variant selection."
}
